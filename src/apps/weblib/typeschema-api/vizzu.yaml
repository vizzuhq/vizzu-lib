---
definitions:

  Snapshot:
    description: Stored Chart object.
    type: object
    properties:
      id: { type: number }
    required: [ id ]

  Feature:
    description: |
      List of base and additional features:
      - logging: enables logging of the library to the console 
        (switched off by default).
      - rendering: enables rendering of the library to the canvas
        (enabled by default). 
      - tooltip: tooltips on the chart appearing on markers on mouse over. 
        Since the tooltip uses the animation interface, calling animate() while
        the tooltip is enabled can cause unwanted behaviour.
    type: string
    enum: [ tooltip, logging, rendering ]

  Vizzu:
    description: Class representing a single chart in Vizzu. 
    type: object
    required: [ initializing, style, config, data ]
    properties:

      constructor:
        description: |
          Creates a new chart and connects it to the div or canvas HTML 
          element specified by its ID or DOM object. The new chart is empty by 
          default, but can be set to an initial state in the second optional 
          parameter.
        type: function
        arguments:
          container: 
            oneOf:
            - type: string
            - $ref: HTMLElement
          initState:
            oneOf:
            - $ref: anim/Target
            - $ref: config/Chart
        required: [ container ]

      initializing:
        description: |
          Promise representing the initialization will resolve when 
          initialization is finished. Any API call will potentially cause 
          an error before this promise is resolved. 
        $ref: Promise
        $template: { T: Vizzu }

      on:
        description: Installs the provided event handler to the event specified by name. 
        type: function
        arguments:
          eventName: { $ref: event/Type }
          handler: { $ref: event/Handler }
        return: { type: void }
        required: [ eventName, handler ]

      off:
        description: Uninstalls the provided event handler from the event specified by name.
        type: function
        arguments:
          eventName: { $ref: event/Type }
          handler: { $ref: event/Handler }
        return: { type: void }
        required: [ eventName, handler ]

      animate:
        description: |
          Initiates the animation either to the new chart state passed as the first 
          argument, or through a sequence of keyframe charts passed as the first
          argument. If there is a currently running animation, all subsequent 
          calls will schedule the corresponding animation after the end of the 
          previous one.
          The new chart state or keyframe can be a full state specifier object with 
          data, config and style, or a single chart config object.
          It accepts also a chart snapshot acquired from a previous state using 
          the store() method of this class or a whole previous animation acquired
          using the store() method of the Anim.Control object, which can be queried
          from the promise returned by the animate() method.
          The optional second parameter specifies the animation control options 
          and also all the other animation options in case of only a single chart
          state passed as the first argument. 
          This second option can be a scalar value, setting the overall 
          animation duration. Passing explicit null as second parameter will
          result in no animation.
          The method returns a promise, which will resolve when the animation is
          finished. Since there can be multiple animations in the queue, the result
          promise provides a nested promise member {@link Anim.Completing.activated|activated}, 
          which resolves when the requested animation gets active. 
        type: function
        arguments:
          animTarget:
            oneOf:
            - $ref: anim/Keyframes
            - $ref: anim/Animation
            - $ref: anim/LazyTarget 
          animOptions:
            oneOf:
            - $ref: anim/ControlOptions
            - allOf:
              - $ref: anim/ControlOptions
              - $ref: anim/LazyOptions
        required: [ animTarget ]
        return: { $ref: anim/Completing }

      store:
        description: |
          Returns a reference to the actual chart state for further reuse. 
          This reference includes the chart config, style parameters and the
          data filter but does not include the actual data and the animation options.
        type: function
        return: { $ref: Snapshot }

      animation:
        description: |
          Returns controls for the ongoing animation, if any.
          @deprecated since version 0.4.0 
        type: function
        return: { $ref: anim/Control }
        getter: true

      version:
        description: Returns the version number of the library. 
        type: function
        return: { type: string }

      style:
        description: Property for read-only access to style object without default values.
        $ref: Readonly
        $template: { T: styles/Chart }

      getComputedStyle:
        description: Property for read-only access to the style object after setting defaults. 
        type: function
        return: 
          $ref: Readonly
          $template: { T: styles/Chart }

      config:
        description: Property for read-only access to chart parameter object. 
        $ref: Readonly
        $template: { T: config/Chart }

      data:
        description: Property for read-only access to data metainfo object. 
        $ref: Readonly
        $template: { T: data/Metainfo }

      feature:
        description: Enable/disable additional features. 
        type: function
        arguments:
          name: { $ref: Feature }
          enabled: { type: boolean }
        required: [ name, enabled ]
        return: { type: void }

      detach:
        description: |
          Removes the reference of the chart from every place it attached itself,
          this method must be called in order to get the chart properly garbage 
          collected. 
        type: function
        return: { type: void }

      presets:
        description: Returns the chart preset collection. 
        type: function
        return: { $ref: presets/Presets }
        static: true
        getter: true

      options:
        description: Setter method for Library options. 
        type: function
        arguments:
          options: { $ref: lib/Options }
        return: { type: void }
        static: true
        required: [ options ]

$ref: Vizzu